/* Generated by Opal 0.8.1 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$now', '$to_i', '$days', '$hour', '$minutes', '$call', '$<<']);
  return (function($base, $super) {
    function $ChatService(){};
    var self = $ChatService = $klass($base, $super, 'ChatService', $ChatService);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    def.block = def.messages = def.user_name = nil;
    def.$initialize = TMP_1 = function() {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil, time = nil;

      TMP_1.$$p = null;
      self.block = block;
      time = $scope.get('Time').$now();
      return self.messages = [$hash2(["from", "time", "message"], {"from": "user1", "time": ($rb_minus(time, (10).$days())).$to_i(), "message": "A 2 point message: \n+ point 1\n+ point 2\nGot it?"}), $hash2(["from", "time", "message"], {"from": "user2", "time": ($rb_minus(time, (8).$days())).$to_i(), "message": "message sent 8 days ago, by user 2"}), $hash2(["from", "time", "message"], {"from": "user3", "time": ($rb_minus(time, (5).$days())).$to_i(), "message": "message sent in the last week"}), $hash2(["from", "time", "message"], {"from": "user2", "time": ($rb_minus(time, (4).$days())).$to_i(), "message": "message sent **also** in the last week"}), $hash2(["from", "time", "message"], {"from": "user1", "time": ($rb_minus(time, (1).$hour())).$to_i(), "message": "Was sent within the last hour!"}), $hash2(["from", "time", "message"], {"from": "user2", "time": ($rb_minus(time, (30).$minutes())).$to_i(), "message": "Was sent 30 minutes ago"}), $hash2(["from", "time", "message"], {"from": "user3", "time": ($rb_minus(time, (10).$minutes())).$to_i(), "message": "Was just sent\n\n\n\n\n\n\n\n\nwith a lot of blanks"}), $hash2(["from", "time", "message"], {"from": "user1", "time": $scope.get('Time').$now().$to_i(), "message": "just now"})];
    };

    def.$login = function(user_name) {
      var self = this;

      self.user_name = user_name;
      return self.block.$call(self.messages);
    };

    def.$id = function() {
      var self = this;

      return self.user_name;
    };

    return (def.$send = function(data) {
      var self = this;

      if (data == null) {
        data = $hash2([], {})
      }
      self.messages['$<<'](data);
      return self.block.$call([data]);
    }, nil) && 'send';
  })(self, null)
})(Opal);
